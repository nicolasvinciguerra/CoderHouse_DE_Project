[2023-12-12T01:37:29.096+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: update_openaq_dw_hourly_catchup.create_stored_procedures manual__2023-12-12T01:37:25.404467+00:00 [queued]>
[2023-12-12T01:37:29.256+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: update_openaq_dw_hourly_catchup.create_stored_procedures manual__2023-12-12T01:37:25.404467+00:00 [queued]>
[2023-12-12T01:37:29.274+0000] {taskinstance.py:1361} INFO - Starting attempt 1 of 4
[2023-12-12T01:37:29.415+0000] {taskinstance.py:1382} INFO - Executing <Task(PostgresOperator): create_stored_procedures> on 2023-12-12 01:37:25.404467+00:00
[2023-12-12T01:37:29.548+0000] {standard_task_runner.py:57} INFO - Started process 830 to run task
[2023-12-12T01:37:29.639+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'update_openaq_dw_hourly_catchup', 'create_stored_procedures', 'manual__2023-12-12T01:37:25.404467+00:00', '--job-id', '389', '--raw', '--subdir', 'DAGS_FOLDER/dag_openaq_catchup.py', '--cfg-path', '/tmp/tmp95jqp4ps']
[2023-12-12T01:37:29.782+0000] {standard_task_runner.py:85} INFO - Job 389: Subtask create_stored_procedures
[2023-12-12T01:37:30.403+0000] {task_command.py:416} INFO - Running <TaskInstance: update_openaq_dw_hourly_catchup.create_stored_procedures manual__2023-12-12T01:37:25.404467+00:00 [running]> on host 2be5b1614f4e
[2023-12-12T01:37:30.642+0000] {taskinstance.py:1662} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='update_openaq_dw_hourly_catchup' AIRFLOW_CTX_TASK_ID='create_stored_procedures' AIRFLOW_CTX_EXECUTION_DATE='2023-12-12T01:37:25.404467+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2023-12-12T01:37:25.404467+00:00'
[2023-12-12T01:37:30.647+0000] {sql.py:274} INFO - Executing: create or replace procedure pETL_load_dim_location()
language plpgsql
as $$
begin 
        -- merge changes to dim_location
        MERGE INTO dim_location
        USING stg_locations
        ON dim_location.id = stg_locations.id
        WHEN MATCHED THEN
            UPDATE SET
                id = stg_locations.id,
                city = stg_locations.city,
                name = stg_locations.name,
                country_code = stg_locations.country,
                sources = stg_locations.sources,
                ismobile = stg_locations.ismobile,
                isanalysis = stg_locations.isanalysis,
                sensortype = stg_locations.sensortype,
                coordinates_latitude = stg_locations.coordinates_latitude,
                coordinates_longitude = stg_locations.coordinates_longitude,
                updated_at = current_timestamp
        WHEN NOT MATCHED THEN
            INSERT (id, city, name, country_code, sources, ismobile, isanalysis, sensortype, 
                    coordinates_latitude, coordinates_longitude)
             VALUES (stg_locations.id, stg_locations.city, stg_locations.name, stg_locations.country, stg_locations.sources,
                    stg_locations.ismobile, stg_locations.isanalysis, stg_locations.sensortype, stg_locations.coordinates_latitude,
                    stg_locations.coordinates_longitude);
end;
$$

;
create or replace procedure pETL_update_country_dim_location()
language plpgsql
as $$
begin 
        -- update country name to dim location
        UPDATE dim_location
        SET country_name = stg_countries.name
        FROM stg_countries
        WHERE dim_location.country_code = stg_countries.code;
end;
$$

;
create or replace procedure pETL_load_dim_parameter()
language plpgsql
as $$
begin 
        -- merge changes to dim parameter
        MERGE INTO dim_parameter
        USING stg_parameters
        ON dim_parameter.id = stg_parameters.id
        WHEN MATCHED THEN
            UPDATE SET
                code = stg_parameters.name,
                displayName = stg_parameters.displayName,
                description = stg_parameters.description,
                preferredUnit = stg_parameters.preferredUnit,
                updated_at = current_timestamp
        WHEN NOT MATCHED THEN
            INSERT (id, code, displayName, description, preferredUnit)
            VALUES (stg_parameters.id, stg_parameters.name, stg_parameters.displayName, 
                    stg_parameters.description, stg_parameters.preferredUnit);
end;
$$

;
create or replace procedure pETL_load_fact_measure()
language plpgsql
as $$
begin 
         -- merge changes to fact_measure
        MERGE INTO fact_measure
        USING stg_measurements
        ON SHA1(stg_measurements.locationid + stg_measurements.parameter + stg_measurements.value + stg_measurements.date_utc)
            = SHA1(fact_measure.location_id + fact_measure.parameter_code + fact_measure.value + fact_measure.date_utc)
        WHEN MATCHED THEN
            UPDATE SET
                location_id = stg_measurements.locationid,
                parameter_code = stg_measurements.parameter,
                value = stg_measurements.value,
                date_local = stg_measurements.date_local,
                date_utc = stg_measurements.date_utc,
                updated_at = current_timestamp
        WHEN NOT MATCHED THEN
            INSERT (location_id, parameter_code, value, date_local, date_utc)
            VALUES (stg_measurements.locationid, stg_measurements.parameter, 
                stg_measurements.value, stg_measurements.date_local, stg_measurements.date_utc);
end;
$$
;
[2023-12-12T01:37:30.664+0000] {crypto.py:82} WARNING - empty cryptography key - values will not be stored encrypted.
[2023-12-12T01:37:30.669+0000] {base.py:73} INFO - Using connection ID 'redshift' for task execution.
[2023-12-12T01:37:30.683+0000] {base.py:73} INFO - Using connection ID 'redshift' for task execution.
[2023-12-12T01:37:31.525+0000] {sql.py:418} INFO - Running statement: create or replace procedure pETL_load_dim_location()
language plpgsql
as $$
begin 
        -- merge changes to dim_location
        MERGE INTO dim_location
        USING stg_locations
        ON dim_location.id = stg_locations.id
        WHEN MATCHED THEN
            UPDATE SET
                id = stg_locations.id,
                city = stg_locations.city,
                name = stg_locations.name,
                country_code = stg_locations.country,
                sources = stg_locations.sources,
                ismobile = stg_locations.ismobile,
                isanalysis = stg_locations.isanalysis,
                sensortype = stg_locations.sensortype,
                coordinates_latitude = stg_locations.coordinates_latitude,
                coordinates_longitude = stg_locations.coordinates_longitude,
                updated_at = current_timestamp
        WHEN NOT MATCHED THEN
            INSERT (id, city, name, country_code, sources, ismobile, isanalysis, sensortype, 
                    coordinates_latitude, coordinates_longitude)
             VALUES (stg_locations.id, stg_locations.city, stg_locations.name, stg_locations.country, stg_locations.sources,
                    stg_locations.ismobile, stg_locations.isanalysis, stg_locations.sensortype, stg_locations.coordinates_latitude,
                    stg_locations.coordinates_longitude);
end;
$$

;
create or replace procedure pETL_update_country_dim_location()
language plpgsql
as $$
begin 
        -- update country name to dim location
        UPDATE dim_location
        SET country_name = stg_countries.name
        FROM stg_countries
        WHERE dim_location.country_code = stg_countries.code;
end;
$$

;
create or replace procedure pETL_load_dim_parameter()
language plpgsql
as $$
begin 
        -- merge changes to dim parameter
        MERGE INTO dim_parameter
        USING stg_parameters
        ON dim_parameter.id = stg_parameters.id
        WHEN MATCHED THEN
            UPDATE SET
                code = stg_parameters.name,
                displayName = stg_parameters.displayName,
                description = stg_parameters.description,
                preferredUnit = stg_parameters.preferredUnit,
                updated_at = current_timestamp
        WHEN NOT MATCHED THEN
            INSERT (id, code, displayName, description, preferredUnit)
            VALUES (stg_parameters.id, stg_parameters.name, stg_parameters.displayName, 
                    stg_parameters.description, stg_parameters.preferredUnit);
end;
$$

;
create or replace procedure pETL_load_fact_measure()
language plpgsql
as $$
begin 
         -- merge changes to fact_measure
        MERGE INTO fact_measure
        USING stg_measurements
        ON SHA1(stg_measurements.locationid + stg_measurements.parameter + stg_measurements.value + stg_measurements.date_utc)
            = SHA1(fact_measure.location_id + fact_measure.parameter_code + fact_measure.value + fact_measure.date_utc)
        WHEN MATCHED THEN
            UPDATE SET
                location_id = stg_measurements.locationid,
                parameter_code = stg_measurements.parameter,
                value = stg_measurements.value,
                date_local = stg_measurements.date_local,
                date_utc = stg_measurements.date_utc,
                updated_at = current_timestamp
        WHEN NOT MATCHED THEN
            INSERT (location_id, parameter_code, value, date_local, date_utc)
            VALUES (stg_measurements.locationid, stg_measurements.parameter, 
                stg_measurements.value, stg_measurements.date_local, stg_measurements.date_utc);
end;
$$
;, parameters: None
[2023-12-12T01:37:31.964+0000] {taskinstance.py:1400} INFO - Marking task as SUCCESS. dag_id=update_openaq_dw_hourly_catchup, task_id=create_stored_procedures, execution_date=20231212T013725, start_date=20231212T013729, end_date=20231212T013731
[2023-12-12T01:37:32.450+0000] {local_task_job_runner.py:228} INFO - Task exited with return code 0
[2023-12-12T01:37:32.615+0000] {taskinstance.py:2778} INFO - 3 downstream tasks scheduled from follow-on schedule check
